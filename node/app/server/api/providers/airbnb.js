// Generated by LiveScript 1.2.0
(function(){
  var _, async, cache, database, moment, request, jsdom;
  _ = require("underscore");
  async = require("async");
  cache = require("./../../cache");
  database = require("./../../database");
  moment = require("moment");
  request = require("request");
  jsdom = require("jsdom").jsdom;
  exports.name = "airbnb.com";
  exports.search = function(origin, destination, extra, cb){
    var numPages, operations;
    numPages = 20;
    operations = _.map((function(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = numPages; i$ < to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }()), function(i){
      return function(cb){
        var airUrl;
        airUrl = "https://api.airbnb.com/v2/search_results?client_id=3092nxybyb0otqw18e8nh5nty"
        airUrl += "&checkin=" + origin.date + "&checkout=" + destination.date + "&location=" + destination.place.name + "--" + destination.place.country_name + "&number_of_guests=" + extra.adults + "&offset=" + i * 20;
        // spoof browser to make this work
        // curl -A "Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5" https://api.airbnb.com/v2/search_results\?client_id\=3092nxybyb0otqw18e8nh5nty\&checkin\=2016-06-15\&checkout\=2016-06-30\&location\=Alexandria--Egypt\&number_of_guests\=2\&offset\=380

        var opts = {
          url: airUrl,
          headers: {
            'User-Agent': 'Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5'
          }
        };
        return cache.request(opts, function(error, body){
          var json, results;
          console.log(error);
          if (error) {
            return cb(error, null);
          }

          try {
            json = JSON.parse(body);
          } catch (e$) {
            error = e$;
            return cb(error, null);
          }
          // console.log(json.search_results)
          if (!json.search_results) {
            return cb({
              message: 'no listings'
            }, null);
          }

          results = _.map(json.search_results, function(r){
            var listing, days, hotel, dbHotel;
            listing = r.listing;

            days = moment.duration(moment(destination.date) - moment(origin.date)).days();
            hotel = {
              address: listing.address,
              id: listing.id,
              images: listing.picture_urls,
              latitude: listing.lat,
              longitude: listing.lng,
              name: listing.name,
              photo: listing.picture_url,
              price: r.pricing_quote.nightly_price * days,
              provider: exports.name,
              rating: null,
              reviews_count: listing.reviews_count,
              stars: null,
              type: 'apartment',
              url: "https://www.airbnb.com/rooms/" + listing.id
            };
            dbHotel = clone$(hotel);
            delete dbHotel.price;
            database.hotels.insert(dbHotel, function(error, hotel){});
            return hotel;
          });
          return cb(null, results);
        });
      };
    });
    return async.parallel(operations, function(error, results){
      if (error) {
        return cb(error, {});
      }
      return cb(null, {
        results: _.flatten(results),
        complete: true
      });
    });
  };
  exports.details = function(id, callback){
    return database.hotels.findOne({
      provider: exports.name,
      id: id
    }, function(error, hotel){
      var url;
      if (error || !hotel) {
        return callback(error, null);
      }
      if (!hotel.description) {
        url = "https://www.airbnb.com/rooms/" + id;
        return cache.request(url, function(error, airBnbPage){
          if (error) {
            return callback(error, null);
          }
          return cache.request("http://code.jquery.com/jquery.js", function(error, jQuery){
            if (error) {
              return callback(error, null);
            }
            return jsdom.env({
              html: airBnbPage,
              src: [jQuery],
              done: function(errors, window){
                if (errors) {
                  return callback(errors, null);
                }
                hotel.description = window.$('#description_text_wrapper').html();
                database.hotels.update({
                  _id: hotel._id
                }, {
                  $set: {
                    description: hotel.description
                  }
                }, true);
                delete hotel._id;
                return callback(null, hotel);
              }
            });
          });
        });
      } else {
        delete hotel._id;
        return callback(null, hotel);
      }
    });
  };
  function clone$(it){
    function fun(){} fun.prototype = it;
    return new fun;
  }
}).call(this);
